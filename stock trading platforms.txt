import java.util.ArrayList; // Import ArrayList class for managing collections
import java.util.HashMap; // Import HashMap class for key-value mappings
import java.util.Map; // Import Map interface for mappings
import java.util.Scanner; // Import Scanner class for user input

// Define a Stock class to represent individual stocks
class Stock {
    private String symbol; // Stock symbol (e.g., AAPL, GOOGL)
    private String name; // Stock name (e.g., Apple Inc., Alphabet Inc.)
    private double price; // Current price per share
    private int quantity; // Number of shares held

    // Constructor to initialize Stock object
    public Stock(String symbol, String name, double price, int quantity) {
        this.symbol = symbol; // Initialize stock symbol
        this.name = name; // Initialize stock name
        this.price = price; // Initialize stock price
        this.quantity = quantity; // Initialize quantity of shares
    }

    // Getters and setters for private fields
    public String getSymbol() {
        return symbol;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    // Override toString method to provide string representation of Stock object
    @Override
    public String toString() {
        return "Stock{" +
                "symbol='" + symbol + '\'' +
                ", name='" + name + '\'' +
                ", price=" + price +
                ", quantity=" + quantity +
                '}';
    }
}

// Define a Portfolio class to manage a collection of stocks
class Portfolio {
    private Map<String, Stock> stocks; // HashMap to store stocks by symbol

    // Constructor to initialize Portfolio object
    public Portfolio() {
        this.stocks = new HashMap<>(); // Initialize HashMap for stocks
    }

    // Method to add a stock to the portfolio
    public void addStock(Stock stock) {
        stocks.put(stock.getSymbol(), stock); // Add stock to HashMap using symbol as key
    }

    // Method to buy stocks
    public void buyStock(String symbol, int quantity, double price) {
        if (stocks.containsKey(symbol)) { // Check if portfolio already contains the stock
            Stock existingStock = stocks.get(symbol); // Retrieve existing stock from HashMap
            existingStock.setQuantity(existingStock.getQuantity() + quantity); // Increase quantity of existing stock
        } else {
            Stock newStock = new Stock(symbol, "Dummy Stock", price, quantity); // Create new stock object
            stocks.put(symbol, newStock); // Add new stock to portfolio
        }
    }

    // Method to sell stocks
    public void sellStock(String symbol, int quantity) {
        if (stocks.containsKey(symbol)) { // Check if portfolio contains the stock
            Stock existingStock = stocks.get(symbol); // Retrieve existing stock from HashMap
            if (existingStock.getQuantity() >= quantity) { // Check if sufficient quantity of stock is available
                existingStock.setQuantity(existingStock.getQuantity() - quantity); // Decrease quantity of existing stock
            } else {
                System.out.println("Insufficient quantity to sell."); // Print message if insufficient quantity
            }
        } else {
            System.out.println("Stock not found in portfolio."); // Print message if stock not found
        }
    }

    // Method to calculate total value of the portfolio
    public double calculatePortfolioValue() {
        double portfolioValue = 0.0; // Initialize portfolio value accumulator
        for (Stock stock : stocks.values()) { // Iterate through stocks in portfolio
            portfolioValue += stock.getPrice() * stock.getQuantity(); // Add value of each stock to portfolio value
        }
        return portfolioValue; // Return total portfolio value
    }

    // Method to display stocks in the portfolio and total portfolio value
    public void displayPortfolio() {
        System.out.println("\nPortfolio:"); // Print heading for portfolio display
        for (Stock stock : stocks.values()) { // Iterate through stocks in portfolio
            System.out.println(stock); // Print details of each stock
        }
        System.out.println("Portfolio Value: $" + calculatePortfolioValue()); // Print total portfolio value
    }
}

// Main class for Simulated Stock Trading Platform
public class SimulatedStockTradingPlatform {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in); // Create Scanner object for user input
        Portfolio portfolio = new Portfolio(); // Create Portfolio object to manage stocks

        // Dummy market data - create some initial stocks
        Stock stock1 = new Stock("AAPL", "Apple Inc.", 150.0, 10); // Example: AAPL stock with price $150, quantity 10
        Stock stock2 = new Stock("GOOGL", "Alphabet Inc.", 2700.0, 5); // Example: GOOGL stock with price $2700, quantity 5
        Stock stock3 = new Stock("AMZN", "Amazon.com Inc.", 3500.0, 3); // Example: AMZN stock with price $3500, quantity 3

        // Add stocks to portfolio
        portfolio.addStock(stock1);
        portfolio.addStock(stock2);
        portfolio.addStock(stock3);

        // Main menu loop for user interaction
        while (true) {
            // Display main menu options
            System.out.println("\nWelcome to Simulated Stock Trading Platform");
            System.out.println("1. Buy Stock");
            System.out.println("2. Sell Stock");
            System.out.println("3. Display Portfolio");
            System.out.println("4. Exit");

            System.out.print("\nEnter your choice: "); // Prompt user for menu choice
            int choice = scanner.nextInt(); // Read user input as integer
            scanner.nextLine(); // Consume newline character

            switch (choice) { // Switch-case based on user choice
                case 1:
                    // Option: Buy Stock
                    System.out.print("Enter stock symbol to buy: "); // Prompt for stock symbol
                    String buySymbol = scanner.nextLine().toUpperCase(); // Read and convert to uppercase
                    System.out.print("Enter quantity to buy: "); // Prompt for quantity
                    int buyQuantity = scanner.nextInt(); // Read quantity as integer
                    System.out.print("Enter price per share: "); // Prompt for price
                    double buyPrice = scanner.nextDouble(); // Read price as double
                    portfolio.buyStock(buySymbol, buyQuantity, buyPrice); // Call buyStock method with input parameters
                    break;
                case 2:
                    // Option: Sell Stock
                    System.out.print("Enter stock symbol to sell: "); // Prompt for stock symbol
                    String sellSymbol = scanner.nextLine().toUpperCase(); // Read and convert to uppercase
                    System.out.print("Enter quantity to sell: "); // Prompt for quantity
                    int sellQuantity = scanner.nextInt(); // Read quantity as integer
                    portfolio.sellStock(sellSymbol, sellQuantity); // Call sellStock method with input parameters
                    break;
                case 3:
                    // Option: Display Portfolio
                    portfolio.displayPortfolio(); // Call displayPortfolio method to print current portfolio
                    break;
                case 4:
                    // Option: Exit
                    System.out.println("Thank you for using Simulated Stock Trading Platform."); // Print exit message
                    scanner.close(); // Close scanner object to free resources
                    return; // Exit main method and terminate program
                default:
                    // Invalid option
                    System.out.println("Invalid choice. Please enter again."); // Print error message for invalid choice
            }
        }
    }
}



java -cp /tmp/mP51NBrJwQ/SimulatedStockTradingPlatform

Welcome to Simulated Stock Trading Platform
1. Buy Stock
2. Sell Stock
3. Display Portfolio
4. Exit

Enter your choice: 1
Enter stock symbol to buy: AAPL
Enter quantity to buy: 5
Enter price per share: 150

Welcome to Simulated Stock Trading Platform
1. Buy Stock
2. Sell Stock
3. Display Portfolio
4. Exit

Enter your choice: 2
Enter stock symbol to sell: AAPL
Enter quantity to sell: 2

Welcome to Simulated Stock Trading Platform
1. Buy Stock
2. Sell Stock
3. Display Portfolio
4. Exit

Enter your choice: 3

Portfolio:
Stock{symbol='GOOGL', name='Alphabet Inc.', price=2700.0, quantity=5}
Stock{symbol='AAPL', name='Apple Inc.', price=150.0, quantity=13}
Stock{symbol='AMZN', name='Amazon.com Inc.', price=3500.0, quantity=3}
Portfolio Value: $25950.0

Welcome to Simulated Stock Trading Platform
1. Buy Stock
2. Sell Stock
3. Display Portfolio
4. Exit

Enter your choice: 4
Thank you for using Simulated Stock Trading Platform.

=== Code Execution Successful ===